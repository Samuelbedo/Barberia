// <auto-generated />
using System;
using Barberia.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Barberia.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231013124400_CedulaImplementada")]
    partial class CedulaImplementada
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Barberia.Shared.Entities.Barbero", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Cedula")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Especialidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Cedula")
                        .IsUnique();

                    b.ToTable("Barberos");
                });

            modelBuilder.Entity("Barberia.Shared.Entities.BarberoReseña", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BarberoId")
                        .HasColumnType("int");

                    b.Property<int>("ReseñaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BarberoId");

                    b.HasIndex("ReseñaId");

                    b.ToTable("BarberoReseña");
                });

            modelBuilder.Entity("Barberia.Shared.Entities.Cita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BarberoId")
                        .HasColumnType("int");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Fecha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Horario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BarberoId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("Barberia.Shared.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Cedula")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Cedula")
                        .IsUnique();

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Barberia.Shared.Entities.Facturacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Fecha")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId")
                        .IsUnique();

                    b.ToTable("Facturaciones");
                });

            modelBuilder.Entity("Barberia.Shared.Entities.Reseña", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Calificacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.HasKey("Id");

                    b.ToTable("Reseñas");
                });

            modelBuilder.Entity("Barberia.Shared.Entities.Servicio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CitaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)");

                    b.Property<float>("Precio")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CitaId")
                        .IsUnique();

                    b.ToTable("Servicios");
                });

            modelBuilder.Entity("Barberia.Shared.Entities.BarberoReseña", b =>
                {
                    b.HasOne("Barberia.Shared.Entities.Barbero", "Barbero")
                        .WithMany("BarberoReseña")
                        .HasForeignKey("BarberoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Barberia.Shared.Entities.Reseña", "Reseña")
                        .WithMany("BarberoReseña")
                        .HasForeignKey("ReseñaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barbero");

                    b.Navigation("Reseña");
                });

            modelBuilder.Entity("Barberia.Shared.Entities.Cita", b =>
                {
                    b.HasOne("Barberia.Shared.Entities.Barbero", "Barbero")
                        .WithMany("Citas")
                        .HasForeignKey("BarberoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Barberia.Shared.Entities.Cliente", "Cliente")
                        .WithMany("Citas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barbero");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Barberia.Shared.Entities.Facturacion", b =>
                {
                    b.HasOne("Barberia.Shared.Entities.Cliente", "Cliente")
                        .WithOne("Facturacion")
                        .HasForeignKey("Barberia.Shared.Entities.Facturacion", "ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Barberia.Shared.Entities.Servicio", b =>
                {
                    b.HasOne("Barberia.Shared.Entities.Cita", "Cita")
                        .WithOne("Servicio")
                        .HasForeignKey("Barberia.Shared.Entities.Servicio", "CitaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cita");
                });

            modelBuilder.Entity("Barberia.Shared.Entities.Barbero", b =>
                {
                    b.Navigation("BarberoReseña");

                    b.Navigation("Citas");
                });

            modelBuilder.Entity("Barberia.Shared.Entities.Cita", b =>
                {
                    b.Navigation("Servicio");
                });

            modelBuilder.Entity("Barberia.Shared.Entities.Cliente", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Facturacion");
                });

            modelBuilder.Entity("Barberia.Shared.Entities.Reseña", b =>
                {
                    b.Navigation("BarberoReseña");
                });
#pragma warning restore 612, 618
        }
    }
}
