@page "/reseñas/edit/{Id:int}"
@using Barberia.Shared.Entities;
@using Barberia.WEB.Repositories;
@using Microsoft.AspNetCore.Authorization;

@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService swal
@attribute [Authorize(Roles = "Usuario")]


<h3>Editar reseña</h3>

@if (reseña is null)
{
    <div class="align-items-center">
        <img src=" https://cdn.dribbble.com/users/1066128/screenshots/2689047/media/e1de05d8bb8908d129983ff3d886c940.gif " />
    </div>
}
else
{
    <ReseñasForm @ref="reseñaForm" Reseña="reseña" OnSubmit="Edit" ReturnAction="Return" />
}

@code {
    private Reseña? reseña;
    private ReseñasForm? reseñaForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<Reseña>($"api/reseñas/{Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("reseñas");
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessage(); //debe ser Async
                await swal.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            reseña = responseHTTP.Response;
        }
    }

        private async Task Edit()
        {
            var responseHTTP = await repository.Put("api/reseñas", reseña);

            if (responseHTTP.Error)
            {
                var mensajeError = await responseHTTP.GetErrorMessage(); //debe ser Async
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            else
            {
                reseñaForm!.FormPostedSuccessfully = true;
                navigationManager.NavigateTo("reseñas");
            }
        }

    private void Return()
    {
        navigationManager.NavigateTo("reseñas");
    }
}

