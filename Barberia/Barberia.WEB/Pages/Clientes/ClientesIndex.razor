@page "/Clientes"
@using Barberia.WEB.Repositories;
@using Barberia.Shared.Entities
@using Microsoft.AspNetCore.Authorization;

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal
@attribute [Authorize(Roles = "Admin,Barbero")]

<h2>Nuestros clientes</h2>

<AuthorizeView Roles="Admin">
    <Authorized>    
        <div class="mb-3">
            <a class="btn btn-outline-dark" href="/clientes/create">Añadir cliente</a>
        </div>
    </Authorized>
</AuthorizeView>

<GenericList MyList="Clientes">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>

                    <th>Nombre</th>
                    <th>Teléfono</th>
                    <th>Dirección</th>
                </tr>

            </thead>
            <tbody>
                @foreach (var cliente in Clientes!)
                {
                    <tr>
                        <td>
                            @cliente.Nombre
                        </td>
                        <td>
                            @cliente.Telefono
                        </td>
                        <td>
                            @cliente.Direccion
                        </td>
                        <AuthorizeView Roles="Admin">
                            <Authorized>  
                                <td>
                                    <a href="/clientes/edit/@cliente.Id" class="btn btn-outline-secondary">Editar</a>
                                    <button class="btn btn-outline-danger" @onclick=@(() => Delete(cliente))>Borrar</button>
                                </td>
                            </Authorized>
                        </AuthorizeView>
                    </tr>
                }
            </tbody>
        </table>

    </Body>

</GenericList>

@code {
    public List<Cliente>? Clientes { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var responseHppt = await repository.Get<List<Cliente>>("api/clientes");
        Clientes = responseHppt.Response!;
    }

    private async Task Delete(Cliente cliente)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.Delete($"api/clientes/{cliente.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessage(); //debe ser Async
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }

}